document.addEventListener('DOMContentLoaded', function () {
    let socket;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 10;
    const currentChatId = document.getElementById('chat').dataset.chatId;
    const user = <%- JSON.stringify(user) %>;
    const wsStatus = document.getElementById('wsstatus');

    // Function to open a new WebSocket connection
    function openSocket() {
        socket = new WebSocket('wss://chat.svaro.cz?auth-token=<%= user_auth_token %>');

        // Update connection status icon
        wsStatus.innerText = 'cloud_done';

        // Handle close event
        socket.addEventListener('close', function (event) {
            console.log('WebSocket connection closed:', event);

            // Update connection status icon
            wsStatus.innerText = 'cloud_sync';

            // Try to reconnect up to maxReconnectAttempts times
            if (reconnectAttempts < maxReconnectAttempts) {
                setTimeout(function () {
                    reconnectAttempts++;
                    openSocket(); // Reconnect
                }, 5000);
            } else {
                console.log('Max reconnect attempts reached.');

                // Update connection status icon
                wsStatus.innerText = 'cloud_off';
            }
        });

        // Handle error event
        socket.addEventListener('error', function (event) {
            console.error('WebSocket error:', event);
        });

        // Handle message event
        socket.addEventListener('message', function (event) {
            if (event.data == 'pong') {
                // Connection keep-alive ping message
            } else {
                const messageJson = JSON.parse(event.data);
                if (messageJson) {
                    // Check if received message belongs to current chat or another one
                    if (messageJson.chatId == currentChatId) {
                        console.log('Received message from ' + messageJson.Username + ':', messageJson.text);
                        // Add message to chat history div
                        const chat = document.getElementById('chat');
                        let text = ``;
                        if (messageJson.Username == user.Username) {
                            text += `<div class="message-right">`;
                        } else {
                            text += `<div class="message">`;
                        }
                        text += `<span class="user">` + messageJson.Username + `</span><br>
                                <div class="message-text ` + (messageJson.Username == user.Username ? 'bg-primary' : 'bg-light') + `">` + messageJson.text + `<br></div>
                                <span class="badge bg-secondary, text-dark">` + (new Date(messageJson.Send).toLocaleDateString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit'})) + `</span>
                                </div>`;
                        chat.innerHTML += text;

                        // Adjust scroll position
                        chat.scrollTop = chat.scrollHeight;
                    } else {
                        console.log('New message from ' + messageJson.Username + ' in chat ' + messageJson.chatId);
                        // TODO: Update chat list unread counter
                    }
                } else {
                    console.error('Received message with invalid format');
                }
            }
        });
    }

    // Function to send a JSON-formatted message to the WebSocket
    function sendMessage() {
        const messageInput = document.getElementById('message');
        const messageValue = messageInput.value;

        // Send only if the message is not empty
        if (messageValue.trim() !== '') {
            const jsonMessage = JSON.stringify({ text: messageValue, chatId: currentChatId });
            
            // Check if the WebSocket is open before sending
            if (socket.readyState === WebSocket.OPEN) {
                // Attempt to send the message
                try {
                    socket.send(jsonMessage);
                    messageInput.value = ''; // Clear the input field
                } catch (error) {
                    console.error('Error while sending message:', error);
                }
            } else {
                console.error('WebSocket is not open. Cannot send message.');
            }
        }
    }

    // Add click event listener to the "Send Message" button
    document.getElementById('send').addEventListener('click', sendMessage);

    // Open initial WebSocket connection
    openSocket();

    // Adjust scroll position on page load
    chat.scrollTop = chat.scrollHeight;

    // Periodically send a plain text "ping" every 30 seconds
    setInterval(function () {
        if (socket.readyState === WebSocket.OPEN) {
            socket.send('ping');
        }
    }, 30000);
});