document.addEventListener('DOMContentLoaded', function () {
    let socket;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 10;
    const currentChatId = document.getElementById('chat').dataset.chatId;
    const user = <%- JSON.stringify(user) %>;
    const wsStatus = document.getElementById('wsstatus');

    // Function to open a new WebSocket connection
    function openSocket() {
        socket = new WebSocket('wss://chat.svaro.cz?auth-token=<%= user_auth_token %>');

        // Update connection status icon
        wsStatus.innerText = 'cloud_done';

        // Handle close event
        socket.addEventListener('close', function (event) {
            console.log('WebSocket connection closed:', event);

            // Update connection status icon
            wsStatus.innerText = 'cloud_sync';

            // Try to reconnect up to maxReconnectAttempts times
            if (reconnectAttempts < maxReconnectAttempts) {
                setTimeout(function () {
                    reconnectAttempts++;
                    openSocket(); // Reconnect
                }, 5000);
            } else {
                console.log('Max reconnect attempts reached.');

                // Update connection status icon
                wsStatus.innerText = 'cloud_off';
            }
        });

        // Handle error event
        socket.addEventListener('error', function (event) {
            console.error('WebSocket error:', event);
        });

        // Handle message event
        socket.addEventListener('message', function (event) {
            if (event.data == 'pong') {
                // Connection keep-alive ping message
            } else {
                const messageJson = JSON.parse(event.data);
                if (messageJson) {
                    // Check type of message
                    if (messageJson.action) {
                        console.log('Received action message: ' + JSON.stringify(messageJson));
                    } else {
                        // Check if received message belongs to current chat or another one
                        if (messageJson.chatId == currentChatId) {
                            console.log('Received message from ' + messageJson.Username + ':', messageJson.text);
                            // Add message to chat history div
                            const chat = document.getElementById('chat');
                            let text = ``;
                            if (messageJson.Username == user.Username) {
                                text += `<div class="message-right">`;
                            } else {
                                text += `<div class="message">`;
                            }
                            text += `<span class="user">` + messageJson.Username + `</span><br>
                                    <div class="message-text ` + (messageJson.Username == user.Username ? 'bg-primary' : 'bg-light') + `">` + messageJson.text + `<br></div>
                                    <span class="badge bg-secondary, text-dark">` + (new Date(messageJson.Send).toLocaleDateString('en-GB', {day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit'})) + `</span>
                                    </div>`;
                            chat.innerHTML += text;

                            // Adjust scroll position
                            chat.scrollTop = chat.scrollHeight;
                        } else {
                            console.log('New message from ' + messageJson.Username + ' in chat ' + messageJson.chatId);
                            // TODO: Update chat list unread counter
                        }
                    }

                    
                } else {
                    console.error('Received message with invalid format');
                }
            }
        });
    }

    // Function to send a JSON-formatted message to the WebSocket
    function sendMessage() {
        const messageInput = document.getElementById('message');
        const messageValue = messageInput.value;

        // Send only if the message is not empty
        if (messageValue.trim() !== '') {
            const jsonMessage = JSON.stringify({ text: messageValue, chatId: currentChatId });
            
            // Check if the WebSocket is open before sending
            if (socket.readyState === WebSocket.OPEN) {
                // Attempt to send the message
                try {
                    socket.send(jsonMessage);
                    messageInput.value = ''; // Clear the input field
                } catch (error) {
                    console.error('Error while sending message:', error);
                }
            } else {
                console.error('WebSocket is not open. Cannot send message.');
            }
        }
    }

    // Add click event listener to the "Send Message" button
    document.getElementById('send').addEventListener('click', sendMessage);
    document.getElementById('message').addEventListener('keydown', function (event) {
        // Check if the key code is for "Enter"
        if (event.key === 'Enter' && !event.shiftKey) {
            // Handle the Enter key press here
            sendMessage();
        }
    });

    // Create new chat call to backend
    function createNewChat() {
        // Get the user input
        const userInput = document.getElementById('userInputNewChat').value;

        // Do something with the user input
        console.log('Calling new chat creation: ' + userInput);

        const url = '/tools';
        const data = { command: 'createChat', title: userInput };

        fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            // Add any other headers as needed
        },
        body: JSON.stringify(data),
        })
        .then(response => response.json())
        .then(data => {
            // Handle the response data
            console.log(JSON.stringify(data));

            // Add new item to list of chats
            const chatList = document.getElementById('chatList');
            let text = `<li class="list-group-item">
            <a href="?chatId=` + data.Id + `" class="user-link">`
              + data.Title +
              `<span class="badge bg-primary float-end">?</span>
            </a>
          </li>`;
          chatList.innerHTML += text;
          const chatListDrop = document.getElementById('chatListDropdown');
          let textDrop = `<li><a class="dropdown-item" href="?chatId=` + data.Id + `">` + data.Title + `</a></li>`;
          chatListDrop.innerHTML += textDrop;
        })
        .catch(error => {
            // Handle errors
            console.error('Error:', error);
        });

        // Close the modal
        $('#inputDialogNewChat').modal('hide');
    }

    function callModalCreateNewChat() {
        // Clear the input field on every open
        document.getElementById('userInputNewChat').value = '';
        
        // Show the modal
        $('#inputDialogNewChat').modal('show');
    }

    // Add click event listener to the "Add new chat" button
    document.getElementById('createNewChat').addEventListener('click', createNewChat);
    document.getElementById('callModalCreateNewChat').addEventListener('click', callModalCreateNewChat);

    // Add user to current chat call to backend
    function addUserToChat() {
        // Get the user input
        const userInput = document.getElementById('userInputAddUserToChat').value;

        // Do something with the user input
        console.log('Calling add user to chat: ' + userInput + ', ' + currentChatId);

        const url = '/tools';
        const data = { command: 'addUser', username: userInput, chatId: currentChatId };

        fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            // Add any other headers as needed
        },
        body: JSON.stringify(data),
        })
        .then(response => response.json())
        .then(data => {
            // Handle the response data
            console.log(JSON.stringify(data));

            // Add new item to list of chat members
          const chatListDrop = document.getElementById('memberListDropdown');
          let textDrop = `<li><a class="dropdown-item" href="#">` + data.Firstname + ' ' + data.Lastname + ' (' + data.Username + `)</a></li>`;
          chatListDrop.innerHTML += textDrop;
        })
        .catch(error => {
            // Handle errors
            console.error('Error:', error);
        });

        // Close the modal
        $('#inputDialogAddUserToChat').modal('hide');
    }

    function callModalAddUserToChat() {
        // Clear the input field on every open
        document.getElementById('userInputAddUserToChat').value = '';
        
        // Show the modal
        $('#inputDialogAddUserToChat').modal('show');
    }

    // Add click event listener to the "Add user to chat" button
    document.getElementById('addUserToChat').addEventListener('click', addUserToChat);
    document.getElementById('callModalAddUserToChat').addEventListener('click', callModalAddUserToChat);
    
    // Remove user from current chat call to backend
    function removeUserFromChat() {
        // Get the user input
        const userInput = document.getElementById('userInputRemoveUserFromChat').value;

        // Do something with the user input
        console.log('Calling remove user from chat: ' + userInput + ', ' + currentChatId);

        const url = '/tools';
        const data = { command: 'removeUser', username: userInput, chatId: currentChatId };

        fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            // Add any other headers as needed
        },
        body: JSON.stringify(data),
        })
        .then(response => response.json())
        .then(data => {
            // Handle the response data
            console.log(JSON.stringify(data));


        })
        .catch(error => {
            // Handle errors
            console.error('Error:', error);
        });

        // Close the modal
        $('#inputDialogRemoveUserFromChat').modal('hide');
    }

    function callModalRemoveUserFromChat(event) {
        // Clear the input field on every open
        document.getElementById('userInputRemoveUserFromChat').value = event.currentTarget.dataset.username;
        
        // Show the modal
        $('#inputDialogRemoveUserFromChat').modal('show');
    }

    // Add click event listener to the "Remove user from chat" button
    document.getElementById('removeUserFromChat').addEventListener('click', removeUserFromChat);
    const elements = document.getElementsByClassName('chatRemoveMember');
    for (const button of elements) {
        button.addEventListener('click', callModalRemoveUserFromChat);
    }

    // Open initial WebSocket connection
    openSocket();

    // Adjust scroll position on page load
    chat.scrollTop = chat.scrollHeight;

    // Periodically send a plain text "ping" every 30 seconds
    setInterval(function () {
        if (socket.readyState === WebSocket.OPEN) {
            socket.send('ping');
        }
    }, 30000);
});